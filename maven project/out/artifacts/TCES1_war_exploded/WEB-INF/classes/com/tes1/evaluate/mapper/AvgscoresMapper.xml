<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tes1.evaluate.mapper.AvgscoresMapper">
  <resultMap id="BaseResultMap" type="com.tes1.evaluate.domain.Avgscores">
    <id column="Id" jdbcType="INTEGER" property="id" />
    <result column="teacherId" jdbcType="INTEGER" property="teacherId" />
    <result column="courseId" jdbcType="INTEGER" property="courseId" />
    <result column="avgscore" jdbcType="REAL" property="avgscore" />
  </resultMap>
  <sql id="Base_Column_List">
    Id, teacherId, courseId,avgscore
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from avgscores
    where Id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from avgscores
    where Id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.tes1.evaluate.domain.Avgscores">
    insert into avgscores (Id, teacherId, courseId, 
      avgscore)
    values (#{id,jdbcType=INTEGER}, #{teacherId,jdbcType=INTEGER}, #{courseId,jdbcType=INTEGER}, 
      #{avgscore,jdbcType=REAL})
  </insert>
  <insert id="insertSelective" parameterType="com.tes1.evaluate.domain.Avgscores">
    insert into avgscores
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        Id,
      </if>
      <if test="teacherId != null">
        teacherId,
      </if>
      <if test="courseId != null">
        courseId,
      </if>
      <if test="avgscore != null">
        avgscore,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="teacherId != null">
        #{teacherId,jdbcType=INTEGER},
      </if>
      <if test="courseId != null">
        #{courseId,jdbcType=INTEGER},
      </if>
      <if test="avgscore != null">
        #{avgscore,jdbcType=REAL},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.tes1.evaluate.domain.Avgscores">
    update avgscores
    <set>
      <if test="teacherId != null">
        teacherId = #{teacherId,jdbcType=INTEGER},
      </if>
      <if test="courseId != null">
        courseId = #{courseId,jdbcType=INTEGER},
      </if>
      <if test="avgscore != null">
        avgscore = #{avgscore,jdbcType=REAL},
      </if>
    </set>
    where Id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.tes1.evaluate.domain.Avgscores">
    update avgscores
    set teacherId = #{teacherId,jdbcType=INTEGER},
      courseId = #{courseId,jdbcType=INTEGER},
      avgscore = #{avgscore,jdbcType=REAL}
    where Id = #{id,jdbcType=INTEGER}
  </update>
  <insert id="addavgscore"  parameterType="java.lang.Integer" >
  insert into avgscores (teacherId,courseId,avgscore) select teaching.teacherId , teaching.courseId , AVG(grades.score) as avgscore  from teaching 
right join 
grades
on teaching.Id = grades.teachingId
where batchId = #{batchid,jdbcType=INTEGER}
group by teaching.teacherId,teaching.courseId
  </insert>
  <!-- 显示所有分页数据 -->
<select id="getScoreListTotal" parameterType="java.lang.Integer" resultType="java.lang.Integer">
    SELECT count(*)    
      FROM avgscores 
     WHERE teacherId=#{userId}
 </select>
<select id="getScoreList" resultType="com.tes1.evaluate.domain.ScoreSearch">
 select a.Id, teacherId, courseName,avgscore*100 as avgscore from avgscores a
  inner join course b on b.Id=a.courseid
  WHERE teacherId=#{uid}
  ORDER BY Id
   LIMIT #{page},#{rows} 
</select> 
<select id="getsearchScoreListTotal" parameterType="java.lang.String" resultType="java.lang.Integer">
    SELECT count(*)    
      FROM avgscores a
inner join course b on b.Id=a.courseid
     <if test="_parameter>&quot;0&quot;">
     and teacherId=#{_parameter,jdbcType=integer}
     </if>
     <if test="_parameter!= '%%'">  
	    AND b.coursename LIKE #{_parameter,jdbcType=VARCHAR}  
	</if> 
 </select>
<select id="getsearchScoreList" resultType="com.tes1.evaluate.domain.ScoreSearch">
  select a.Id, teacherId, courseName,avgscore*100 as avgscore from avgscores a
  inner join course b on b.Id=a.courseid
    WHERE teacherId=#{uid}
    <if test="coursename!='%%'">  
    AND b.coursename LIKE #{coursename,jdbcType=VARCHAR}  
  </if>
  ORDER BY a.Id
   LIMIT #{page},#{rows} 
</select> 
</mapper>